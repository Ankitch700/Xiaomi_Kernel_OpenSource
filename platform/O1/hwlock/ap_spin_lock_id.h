// SPDX-License-Identifier: GPL-2.0-or-later
/*
 * Copyright (C) 2022-2025, X-Ring technologies Inc., All rights reserved.
 */
#ifndef __AP_SPIN_LOCK_ID_H__
#define __AP_SPIN_LOCK_ID_H__

#define AP_PERI_LOCK_TOTAL_NUM	72
#define AP_LPIS_LOCK_TOTAL_NUM	40

#define PERI_LOCK_ID_CAL(X, Y)			(X * 8 + Y)
#define LPIS_LOCK_ID_CAL(X, Y)			(X * 8 + Y + AP_PERI_LOCK_TOTAL_NUM)

enum ap_spin_lock_domain {
	AP_LPIS_SPIN_LOCK,
	AP_PERI_SPIN_LOCK,
	AP_SPIN_LOCK_DOMAIN_MAX,
};


enum ap_spin_lock_master {
	AP_SPIN_LOCK_MASTER_LPCTRL = 1,
	AP_SPIN_LOCK_MASTER_SENSORHUB,
	AP_SPIN_LOCK_MASTER_ACPU_KERNEL,
	AP_SPIN_LOCK_MASTER_ADSP,
	AP_SPIN_LOCK_MASTER_ACPU_XHEE = 0x10,
	AP_SPIN_LOCK_MASTER_ACPU_ATF,
	AP_SPIN_LOCK_MASTER_ACPU_XSPM,
	AP_SPIN_LOCK_MASTER_ACPU_MITEE,
	AP_SPIN_LOCK_MASTER_ACPU_XSP,
	AP_SPIN_LOCK_MASTER_ACPU_UEFI,
	AP_SPIN_LOCK_MASTER_XRSE,
	AP_SPIN_LOCK_MASTER_XCTRLCPU,
	AP_SPIN_LOCK_MASTER_MAX
};



enum peri_spin_lock_id {
	AP_PERI_SPIN_LOCK_ID_0_0 = 0,
	AP_PERI_SPIN_LOCK_ID_0_1,
	AP_PERI_SPIN_LOCK_ID_0_2,
	AP_PERI_SPIN_LOCK_ID_0_3,
	AP_PERI_SPIN_LOCK_ID_0_4,
	AP_PERI_SPIN_LOCK_ID_1_0 = PERI_LOCK_ID_CAL(1, 0),
	AP_PERI_SPIN_LOCK_ID_1_1,
	AP_PERI_SPIN_LOCK_ID_1_2,


	AP_PERI_SPIN_LOCK_MAX = AP_PERI_LOCK_TOTAL_NUM
};

enum lpis_spin_lock_id {
	AP_LPIS_SPIN_LOCK_ID_0_0 = LPIS_LOCK_ID_CAL(0, 0),
	AP_LPIS_SPIN_LOCK_ID_0_1,
	AP_LPIS_SPIN_LOCK_ID_0_2,
	AP_LPIS_SPIN_LOCK_ID_0_3,
	AP_LPIS_SPIN_LOCK_ID_0_4,
	AP_LPIS_SPIN_LOCK_ID_1_0 = LPIS_LOCK_ID_CAL(1, 0),
	AP_LPIS_SPIN_LOCK_ID_1_1,
	AP_LPIS_SPIN_LOCK_ID_1_2,

	AP_LPIS_SPIN_LOCK_MAX = AP_LPIS_LOCK_TOTAL_NUM
};


#define GROUP_NUM(X)			((X) >> 3)
#define BITS_OFFSET(X)			((X) & 0x7)


#define LOCK_REQ_ADDRESS(X)		(GROUP_NUM(X) * 0x0C)
#define LOCK_MID_H_ADDRESS		(0x04)
#define LOCK_MID_L_ADDRESS		(0x08)

#define XR_HWLOCKS_BASE_ID		0
#define SHIFT_32			32


#define LOCK_REQ_BIT(X)			(0x01 << (BITS_OFFSET(X) + 8))
#define LOCK_CLR_BIT(X)			(0x01 << (BITS_OFFSET(X) + 16))
#define MID_REQ_MASK(X)			(0xffULL << (BITS_OFFSET(X) * 8))
#define MID_REQ_BIT(mid, X)		((uint64_t)mid << (BITS_OFFSET(X) * 8))

#endif
