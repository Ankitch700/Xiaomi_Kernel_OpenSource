// SPDX-License-Identifier: GPL-2.0-or-later
/*
 * Copyright (C) 2022-2025, X-Ring technologies Inc., All rights reserved.
 */

#ifndef __XRING_FLOWCTRL_CHANNEL_DEFINE_H__
#define __XRING_FLOWCTRL_CHANNEL_DEFINE_H__

#if defined(_LINUX) || defined(__linux__)
#include <linux/stddef.h>
#else
#include <stddef.h>
#endif

enum flowctrl_mst_id {
	MST_NPU_QOS_ID = 0,
	MST_ISP_QOS_ID,
	MST_ISP_QOS_THR_ID,
	MST_DPU_QOS_ID,
	MST_VPU_QOS_ID,
	MST_TPC_COMMON_TABLE_ID,
	MST_TPC_TABLE_ID,
	SYS_QOS_TABLE_ID,
	ISP_QOS_REMAP_TABLE_ID,
	MST_MAX
};

static void* xring_flowctrl_get_cfg_table(enum flowctrl_mst_id);

enum npu_qos_id {
	NPU_XIODMA_QOS_ID = 0,
	NPU_MCU_QOS_ID,
	NPU_DMA_AXI0_3_QOS_ID,
	NPU_VDSP_ID_QOS_ID,
	NPU_VDSP_IDMA_QOS_ID,
	NPU_QOS_ID_MAX
};

enum rw_qos_mode {
	AW_QOS = 0,
	AR_QOS,
	RW_QOS_CNT
};
struct npu_qos_map {
	enum npu_qos_id id;
	unsigned int val[RW_QOS_CNT];
};


enum isp_qos_id {
	ISP_MCU_AW_ID = 0,
	ISP_MCU_AR_ID,
	ISP_CMDDMA_AW_ID,
	ISP_CMDDMA_AR_ID,
	ISP_GPDMA_CH0_1_AW_ID,
	ISP_GPDMA_CH0_1_AR_ID,
	ISP_FE_ROUTER_AW_ID,
	ISP_FE_ROUTER_AR_ID,
	ISP_FE_CORE0_2_AW_ID,
	ISP_BE0_1_AW_ID,
	ISP_BE0_1_AR_ID,
	ISP_PE_AW_ID,
	ISP_PE_AR_ID,
	ISP_CVE_AW_ID,
	ISP_CVE_AR_ID,
	ISP_QOS_ID_MAX
};

enum rt_mode {
	BH = 0,
	RT,
	RT_MODE_CNT
};

struct isp_qos_map {
	enum isp_qos_id id;
	unsigned int val[RT_MODE_CNT];
};

enum isp_qos_thr_ch_id {

	FE_ROUTER_WDMA_ID = 0,
	FE_CORE0_WDMA_ID,
	FE_CORE1_WDMA_ID,
	FE_CORE2_WDMA_ID,
	PE_WDMA_ID,
	CVE_M0_WDMA_ID,
	CVE_M1_WDMA_ID,
	CVE_M2_WDMA_ID,
	CVE_M3_WDMA_ID,
	CVE_M4_WDMA_ID,
	CVE_M5_WDMA_ID,
	CVE_M6_WDMA_ID,
	CVE_M7_WDMA_ID,
	CVE_M8_WDMA_ID,
	CVE_M9_WDMA_ID,
	CVE_M10_WDMA_ID,
	CVE_M11_WDMA_ID,
	CVE_M12_WDMA_ID,
	CVE_M13_WDMA_ID,
	CVE_M14_WDMA_ID,
	CVE_M15_WDMA_ID,
	CVE_M16_WDMA_ID,
	CVE_M17_WDMA_ID,
	CVE_M18_WDMA_ID,
	CVE_M19_WDMA_ID,
	BEF_M0_WDMA_ID,
	BEF_M1_WDMA_ID,
	BEB_M0_WDMA_ID,
	BEB_M1_WDMA_ID,
	BEB_M2_WDMA_ID,
	BEB_M3_WDMA_ID,
	BEB_M4_WDMA_ID,
	BEB_M5_WDMA_ID,
	BEB_M6_WDMA_ID,
	BEB_M7_WDMA_ID,

	FE_ROUTER_M0_RDMA_ID,
	FE_ROUTER_M1_RDMA_ID,
	CVE_M0_RDMA_ID,
	CVE_M1_RDMA_ID,
	CVE_M2_RDMA_ID,
	CVE_M3_RDMA_ID,
	CVE_M4_RDMA_ID,
	CVE_M5_RDMA_ID,
	CVE_M6_RDMA_ID,
	CVE_M7_RDMA_ID,
	CVE_M8_RDMA_ID,
	CVE_M9_RDMA_ID,
	CVE_M10_RDMA_ID,
	CVE_M11_RDMA_ID,
	CVE_M12_RDMA_ID,
	CVE_M13_RDMA_ID,
	BEF_M0_RDMA_ID,
	BEF_M1_RDMA_ID,
	BEB_M0_RDMA_ID,
	BEB_M1_RDMA_ID,
	BEB_M2_RDMA_ID,
	PE_M0_RDMA_ID,
	PE_M1_RDMA_ID,
	PE_M2_RDMA_ID,
	PE_M3_RDMA_ID,
	PE_M4_RDMA_ID,
	PE_M5_RDMA_ID,
	PE_M6_RDMA_ID,
	PE_EIS_RDMA_ID,
	PE_TNR_RDMA_ID,

	ISP_QOS_THR_ID_MAX
};
struct isp_flow_ctrl_map {
	enum isp_qos_thr_ch_id id;
	unsigned int qos_th[3];
	unsigned int urgent_th;
	unsigned int urgent_en;
};

enum dpu_qos_id {
	DPU_LAYER_RDMA0_9_ID = 0,
	DPU_WB_WDMA0_1_ID,
	DPU_DSC_WDMA0_1_ID,
	DPU_DSC_RDMA0_1_ID,
	DPU_VEU_RDMA_ID,
	DPU_VEU_WDMA_ID,
	DPU_MMU_ID,
	DPU_CMDLSIT_ID,

	DPU_CHANNEL_ID_MAX
};

enum online_mode {
	DPU_RT_QOS_PAT = 0,
	DPU_NRT_QOS_PAT,
	QOS_PAT_NUM
};

struct dpu_qos_map {
   enum dpu_qos_id id;

   unsigned int single_qos_val[QOS_PAT_NUM];

   unsigned int rdma_arqos_level[QOS_PAT_NUM][4];
   unsigned int obuf_arqos_level[QOS_PAT_NUM][4];
};

enum vpu_qos_id {

	VDEC_AXI_REM_RQOS_ID = 0,
	VDEC_AXI_REM_WQOS_ID,
	VDEC_RDCH0_RQOS_ID,
	VDEC_RDCH0_WQOS_ID,
	VDEC_RDCH1_RQOS_ID,
	VDEC_RDCH1_WQOS_ID,

	VENC_AXI_REM_RQOS_ID,
	VENC_AXI_REM_WQOS_ID,
	VENC_RDCH0_RQOS_ID,
	VENC_RDCH0_WQOS_ID,
	VENC_RDCH1_RQOS_ID,
	VENC_RDCH1_WQOS_ID,

	VPU_QOS_ID_MAX
};
struct vpu_qos_map {
	enum vpu_qos_id id;
	unsigned int offset;
	unsigned int val;
};


static struct npu_qos_map g_npu_qos_table[NPU_QOS_ID_MAX] = {
	{NPU_XIODMA_QOS_ID, {0xC41390, 0xC41390}},
	{NPU_MCU_QOS_ID, {0x6, 0x6}},
	{NPU_DMA_AXI0_3_QOS_ID, {0x1, 0x1}},
	{NPU_VDSP_ID_QOS_ID, {0x0, 0x0}},
	{NPU_VDSP_IDMA_QOS_ID, {0x0, 0x0}},
};

static struct isp_qos_map g_isp_qos_table[ISP_QOS_ID_MAX] = {
	{ISP_MCU_AW_ID, {0xE, 0xE}},
	{ISP_MCU_AR_ID, {0xE, 0xE}},
	{ISP_CMDDMA_AW_ID, {0x2, 0x2}},
	{ISP_CMDDMA_AR_ID, {0x2, 0x2}},
	{ISP_GPDMA_CH0_1_AW_ID, {0x0, 0x1}},
	{ISP_GPDMA_CH0_1_AR_ID, {0x0, 0x1}},
	{ISP_FE_ROUTER_AW_ID, {0x0, 0x2}},
	{ISP_FE_ROUTER_AR_ID, {0x0, 0x2}},
	{ISP_FE_CORE0_2_AW_ID, {0x0, 0x2}},
	{ISP_BE0_1_AW_ID, {0x0, 0x1}},
	{ISP_BE0_1_AR_ID, {0x0, 0x1}},
	{ISP_PE_AW_ID, {0x0, 0x0}},
	{ISP_PE_AR_ID, {0x0, 0x0}},
	{ISP_CVE_AW_ID, {0x0, 0x0}},
	{ISP_CVE_AR_ID, {0x0, 0x0}},
};

static struct isp_flow_ctrl_map g_isp_qos_thr_table[ISP_QOS_THR_ID_MAX] = {

	{FE_ROUTER_WDMA_ID, {0x50904F9, 0xA0B09FB, 0xF0C0EFC}, 0xF0C0EFC, 1},
	{FE_CORE0_WDMA_ID, {0x4500440, 0x8980888, 0xCE00CD0}, 0xCE00CD0, 1},
	{FE_CORE1_WDMA_ID, {0x4500440, 0x8980888, 0xCE00CD0}, 0xCE00CD0, 1},
	{FE_CORE2_WDMA_ID, {0x4500440, 0x8980888, 0xCE00CD0}, 0xCE00CD0, 1},
	{PE_WDMA_ID, {0x3940384, 0x7280718, 0xAB80AA8}, 0xFFFFFFFF, 0xFFFFFFFF},
	{CVE_M0_WDMA_ID, {0x12000E, 0x22001E, 0x32002E}, 0xFFFFFFFF, 0xFFFFFFFF},
	{CVE_M1_WDMA_ID, {0x34002C, 0x64005C, 0x94008C}, 0xFFFFFFFF, 0xFFFFFFFF},
	{CVE_M2_WDMA_ID, {0x24001C, 0x44003C, 0x64005C}, 0xFFFFFFFF, 0xFFFFFFFF},
	{CVE_M3_WDMA_ID, {0x24001C, 0x44003C, 0x64005C}, 0xFFFFFFFF, 0xFFFFFFFF},
	{CVE_M4_WDMA_ID, {0x24001C, 0x44003C, 0x64005C}, 0xFFFFFFFF, 0xFFFFFFFF},
	{CVE_M5_WDMA_ID, {0x24001C, 0x44003C, 0x64005C}, 0xFFFFFFFF, 0xFFFFFFFF},
	{CVE_M6_WDMA_ID, {0xA0006, 0x12000E, 0x1A0016}, 0xFFFFFFFF, 0xFFFFFFFF},
	{CVE_M7_WDMA_ID, {0xA0006, 0x12000E, 0x1A0016}, 0xFFFFFFFF, 0xFFFFFFFF},
	{CVE_M8_WDMA_ID, {0x12000E, 0x22001E, 0x32002E}, 0xFFFFFFFF, 0xFFFFFFFF},
	{CVE_M9_WDMA_ID, {0x34002C, 0x64005C, 0x94008C}, 0xFFFFFFFF, 0xFFFFFFFF},
	{CVE_M10_WDMA_ID, {0x24001C, 0x44003C, 0x64005C}, 0xFFFFFFFF, 0xFFFFFFFF},
	{CVE_M11_WDMA_ID, {0x24001C, 0x44003C, 0x64005C}, 0xFFFFFFFF, 0xFFFFFFFF},
	{CVE_M12_WDMA_ID, {0x24001C, 0x44003C, 0x64005C}, 0xFFFFFFFF, 0xFFFFFFFF},
	{CVE_M13_WDMA_ID, {0x24001C, 0x44003C, 0x64005C}, 0xFFFFFFFF, 0xFFFFFFFF},
	{CVE_M14_WDMA_ID, {0xA0006, 0x12000E, 0x1A0016}, 0xFFFFFFFF, 0xFFFFFFFF},
	{CVE_M15_WDMA_ID, {0xA0006, 0x12000E, 0x1A0016}, 0xFFFFFFFF, 0xFFFFFFFF},
	{CVE_M16_WDMA_ID, {0x1280118, 0x2480238, 0x3680358}, 0xFFFFFFFF, 0xFFFFFFFF},
	{CVE_M17_WDMA_ID, {0x1280118, 0x2480238, 0x3680358}, 0xFFFFFFFF, 0xFFFFFFFF},
	{CVE_M18_WDMA_ID, {0xA0006, 0x12000E, 0x1A0016}, 0xFFFFFFFF, 0xFFFFFFFF},
	{CVE_M19_WDMA_ID, {0xA0006, 0x12000E, 0x1A0016}, 0xFFFFFFFF, 0xFFFFFFFF},
	{BEF_M0_WDMA_ID, {0x10800F8, 0x20801F8, 0x30802F8}, 0xFFFFFFFF, 0xFFFFFFFF},
	{BEF_M1_WDMA_ID, {0x10800F8, 0x20801F8, 0x30802F8}, 0xFFFFFFFF, 0xFFFFFFFF},
	{BEB_M0_WDMA_ID, {0x24001C, 0x44003C, 0x64005C}, 0xFFFFFFFF, 0xFFFFFFFF},
	{BEB_M1_WDMA_ID, {0x24001C, 0x44003C, 0x64005C}, 0xFFFFFFFF, 0xFFFFFFFF},
	{BEB_M2_WDMA_ID, {0x44003C, 0x84007C, 0xC400BC}, 0xFFFFFFFF, 0xFFFFFFFF},
	{BEB_M3_WDMA_ID, {0x44003C, 0x84007C, 0xC400BC}, 0xFFFFFFFF, 0xFFFFFFFF},
	{BEB_M4_WDMA_ID, {0x1280118, 0x2480238, 0x3680358}, 0xFFFFFFFF, 0xFFFFFFFF},
	{BEB_M5_WDMA_ID, {0x44003C, 0x84007C, 0xC400BC}, 0xFFFFFFFF, 0xFFFFFFFF},
	{BEB_M6_WDMA_ID, {0x0, 0x0, 0x0}, 0xFFFFFFFF, 0xFFFFFFFF},
	{BEB_M7_WDMA_ID, {0x1280118, 0x2480238, 0x3680358}, 0xFFFFFFFF, 0xFFFFFFFF},

	{FE_ROUTER_M0_RDMA_ID, {0x2A80298, 0x5480538, 0x7E807D8}, 0xFFFFFFFF, 0xFFFFFFFF},
	{FE_ROUTER_M1_RDMA_ID, {0xB800A8, 0x1680158, 0x2180208}, 0xFFFFFFFF, 0xFFFFFFFF},
	{CVE_M0_RDMA_ID, {0x64005C, 0xC400BC, 0x124011C}, 0xFFFFFFFF, 0xFFFFFFFF},
	{CVE_M1_RDMA_ID, {0x12000E, 0x22001E, 0x32002E}, 0xFFFFFFFF, 0xFFFFFFFF},
	{CVE_M2_RDMA_ID, {0x12000E, 0x22001E, 0x32002E}, 0xFFFFFFFF, 0xFFFFFFFF},
	{CVE_M3_RDMA_ID, {0x12000E, 0x22001E, 0x32002E}, 0xFFFFFFFF, 0xFFFFFFFF},
	{CVE_M4_RDMA_ID, {0x12000E, 0x22001E, 0x32002E}, 0xFFFFFFFF, 0xFFFFFFFF},
	{CVE_M5_RDMA_ID, {0x64005C, 0xC400BC, 0x124011C}, 0xFFFFFFFF, 0xFFFFFFFF},
	{CVE_M6_RDMA_ID, {0x12000E, 0x22001E, 0x32002E}, 0xFFFFFFFF, 0xFFFFFFFF},
	{CVE_M7_RDMA_ID, {0x12000E, 0x22001E, 0x32002E}, 0xFFFFFFFF, 0xFFFFFFFF},
	{CVE_M8_RDMA_ID, {0x12000E, 0x22001E, 0x32002E}, 0xFFFFFFFF, 0xFFFFFFFF},
	{CVE_M9_RDMA_ID, {0x12000E, 0x22001E, 0x32002E}, 0xFFFFFFFF, 0xFFFFFFFF},
	{CVE_M10_RDMA_ID, {0xB800A8, 0x1680158, 0x2180208}, 0xFFFFFFFF, 0xFFFFFFFF},
	{CVE_M11_RDMA_ID, {0xE800D8, 0x1C801B8, 0x2A80298}, 0xFFFFFFFF, 0xFFFFFFFF},
	{CVE_M12_RDMA_ID, {0x34002C, 0x64005C, 0x94008C}, 0xFFFFFFFF, 0xFFFFFFFF},
	{CVE_M13_RDMA_ID, {0x44003C, 0x84007C, 0xC400BC}, 0xFFFFFFFF, 0xFFFFFFFF},
	{BEF_M0_RDMA_ID, {0x1280118, 0x2480238, 0x3680358}, 0xFFFFFFFF, 0xFFFFFFFF},
	{BEF_M1_RDMA_ID, {0x1280118, 0x2480238, 0x3680358}, 0xFFFFFFFF, 0xFFFFFFFF},
	{BEB_M0_RDMA_ID, {0x10800F8, 0x20801F8, 0x30802F8}, 0xFFFFFFFF, 0xFFFFFFFF},
	{BEB_M1_RDMA_ID, {0x10800F8, 0x20801F8, 0x30802F8}, 0xFFFFFFFF, 0xFFFFFFFF},
	{BEB_M2_RDMA_ID, {0x10800F8, 0x20801F8, 0x30802F8}, 0xFFFFFFFF, 0xFFFFFFFF},
	{PE_M0_RDMA_ID, {0x9E008E, 0x1340124, 0x1CA01BA}, 0xFFFFFFFF, 0xFFFFFFFF},
	{PE_M1_RDMA_ID, {0x530043, 0x9E008E, 0xE900D9}, 0xFFFFFFFF, 0xFFFFFFFF},
	{PE_M2_RDMA_ID, {0xC0008, 0x160012, 0x20001C}, 0xFFFFFFFF, 0xFFFFFFFF},
	{PE_M3_RDMA_ID, {0x180010, 0x2C0024, 0x400038}, 0xFFFFFFFF, 0xFFFFFFFF},
	{PE_M4_RDMA_ID, {0xC0008, 0x160012, 0x20001C}, 0xFFFFFFFF, 0xFFFFFFFF},
	{PE_M5_RDMA_ID, {0x180010, 0x2C0024, 0x400038}, 0xFFFFFFFF, 0xFFFFFFFF},
	{PE_M6_RDMA_ID, {0xC0008, 0x160012, 0x20001C}, 0xFFFFFFFF, 0xFFFFFFFF},
	{PE_EIS_RDMA_ID, {0x10800F8, 0x20801F8, 0x30802F8}, 0xFFFFFFFF, 0xFFFFFFFF},
	{PE_TNR_RDMA_ID, {0x10800F8, 0x20801F8, 0x30802F8}, 0xFFFFFFFF, 0xFFFFFFFF},
};

static struct dpu_qos_map g_dpu_qos_table[DPU_CHANNEL_ID_MAX] = {

	{DPU_LAYER_RDMA0_9_ID, {0xFFFFFFFF, 0xFFFFFFFF},
		{{0x0, 0x0, 0x1, 0x1}, {0x0, 0x0, 0x1, 0x1}},
		{{0x4, 0x6, 0x8, 0xA}, {0x0, 0x0, 0x2, 0x2}}},
	{DPU_WB_WDMA0_1_ID, {0x9, 0x2},
		{{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF}, {0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF}}, {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF}, {0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF}}},
	{DPU_DSC_WDMA0_1_ID, {0x9, 0x9},
		{{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF}, {0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF}}, {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF}, {0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF}}},
	{DPU_DSC_RDMA0_1_ID, {0x9, 0x9},
		{{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF}, {0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF}}, {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF}, {0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF}}},
	{DPU_VEU_RDMA_ID, {0xFFFFFFFF, 0xFFFFFFFF},
		{{0x0, 0x0, 0x1, 0x1}, {0x0, 0x0, 0x1, 0x1}},
		{{0x0, 0x0, 0x2, 0x2}, {0x0, 0x0, 0x2, 0x2}}},
	{DPU_VEU_WDMA_ID, {0x2, 0x2},
		{{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF}, {0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF}}, {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF}, {0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF}}},
	{DPU_MMU_ID, {0xD, 0xD},
		{{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF}, {0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF}}, {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF}, {0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF}}},
	{DPU_CMDLSIT_ID, {0xE, 0xE},
		{{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF}, {0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF}}, {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF}, {0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF}}},
};

static struct vpu_qos_map g_vpu_qos_table[VPU_QOS_ID_MAX] = {

	{VDEC_AXI_REM_RQOS_ID, 0x34, 0x700},
	{VDEC_AXI_REM_WQOS_ID, 0x38, 0x700},
	{VDEC_RDCH0_RQOS_ID, 0x10C, 0x700},
	{VDEC_RDCH0_WQOS_ID, 0x11C, 0x700},
	{VDEC_RDCH1_RQOS_ID, 0x12C, 0x700},
	{VDEC_RDCH1_WQOS_ID, 0x13C, 0x700},

	{VENC_AXI_REM_RQOS_ID, 0x34, 0x700},
	{VENC_AXI_REM_WQOS_ID, 0x38, 0x700},
	{VENC_RDCH0_RQOS_ID, 0x10C, 0x700},
	{VENC_RDCH0_WQOS_ID, 0x11C, 0x700},
	{VENC_RDCH1_RQOS_ID, 0x12C, 0x700},
	{VENC_RDCH1_WQOS_ID, 0x13C, 0x700},
};

enum tpc_common_mst_id {
	HSS1_COMMON_ID = 0,
	HSS2_COMMON_ID,
	DMA_COMMON_ID,
	DPU_COMMON_ID,
	M1_CTRL_COMMON_ID,
	ISP_COMMON_ID,
	M2_CTRL_COMMON_ID,
	NPU_COMMON_ID,
	MAIN_NPU_COMMON_ID,
	MAIN_GPU_COMMON_ID,
	MAIN_SYS1_COMMON_ID,

	TPC_COMMON_ID_MAX
};

enum tpc_mst_id {
	HSS1_UFS_CTRL_ID = 0,
	HSS1_USB31_CTRL_ID,
	HSS2_PCIEX_CTRL_ID,
	HSS2_TCU_ID,
	DMA_ALL_ID,
	M1_DPU_VGDMAX_ID,
	M1_DPU_DSC_ID,
	M1_DPU_VEU_ID,
	M1_DPU_AXI_ID,
	M1_VDEC_ID,
	M1_TCU_ID,
	M2_ISP_FE_BE_ID,
	M2_ISP_CVE_PE_ID,
	M2_ISP_DMA_ID,
	M2_ISP_CDMA_ID,
	M2_ISP_MCU_ID,
	M2_ISP_TBU_ID,
	M2_VENC_ID,
	M2_TCU_ID,
	NPU_XIODMA_ID,
	NPU_VDSP_DMA256_ID,
	NPU_DSA_GP_ID,
	NPU_VDSP_128_ID,
	NPU_M85_ID,
	NPU_DMA_ID,
	NPU_TCU_ID,
	MAIN_NPU_ID,
	MAIN_GPU_ID,
	MAIN_SYS1_ID,

	TPC_MST_ID_MAX
};

#define TPC_COMMON_CFG_NUM 10
struct tpc_common_cfg_map {
	enum tpc_common_mst_id id;
	unsigned int val[TPC_COMMON_CFG_NUM];
};

#define TPC_CFG_NUM 6
struct tpc_cfg_map {
	enum tpc_mst_id id;
	unsigned int val[TPC_CFG_NUM];
};

static struct tpc_common_cfg_map g_tpc_common_cfg_table[TPC_COMMON_ID_MAX] = {
	{HSS1_COMMON_ID, {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xFFFFFF40, 0x26190D06, 0xFFFFFF40, 0x26190D06}},
	{HSS2_COMMON_ID, {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xFFFFFF40, 0x26190D06, 0xFFFFFF40, 0x26190D06}},
	{DMA_COMMON_ID, {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xFFFFFF40, 0x26190D06, 0xFFFFFF40, 0x26190D06}},
	{DPU_COMMON_ID, {0x8, 0x40000001, 0x0, 0x0, 0x0, 0x0, 0xFFFFFF26, 0x190D0603, 0xFFFFFF26, 0x190D0603}},
	{M1_CTRL_COMMON_ID, {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xFFFFFF26, 0x02020101, 0xFFFFFF26, 0x02020101}},
	{ISP_COMMON_ID, {0x40000001, 0x8, 0x0, 0x0, 0x0, 0x0, 0xFFFFFF26, 0x190D0603, 0xFFFFFF26, 0x190D0603}},
	{M2_CTRL_COMMON_ID, {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xFFFFFF26, 0x02020101, 0xFFFFFF26, 0x02020101}},
	{NPU_COMMON_ID, {0x40000001, 0x8, 0x0, 0x0, 0x0, 0x0, 0xFFFFFF26, 0x190D0603, 0xFFFFFF26, 0x190D0603}},
	{MAIN_NPU_COMMON_ID, {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xFFFFFF03, 0x01010101, 0xFFFFFF03, 0x01010101}},
	{MAIN_GPU_COMMON_ID, {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xFFFFFF03, 0x01010101, 0xFFFFFF03, 0x01010101}},
	{MAIN_SYS1_COMMON_ID, {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xFFFFFF40, 0x26190D06, 0xFFFFFF40, 0x26190D06}},
};

#define FLOWCTRL_FC_QOS_VAL 0xFED87654

static struct tpc_cfg_map g_tpc_cfg_table[TPC_MST_ID_MAX] = {
	{HSS1_UFS_CTRL_ID, {0x40403D, 0x8080, 0x22222210, 0xA2222210, 0xA2222222, 0x10001000}},
	{HSS1_USB31_CTRL_ID, {0x40403D, 0x8080, 0x66543210, 0xE6543210, 0xE6666666, 0x10001000}},
	{HSS2_PCIEX_CTRL_ID, {0x40403D, 0x8080, 0x22222210, 0xA2222210, 0xA2222222, 0x10001000}},
	{HSS2_TCU_ID, {0x40403D, 0x8080, 0x55555555, 0xD5555555, 0xD5555555, 0x10001000}},
	{DMA_ALL_ID, {0x40403D, 0x8080, 0x00000000, 0x80000000,0x80000000, 0x10001000}},
	{M1_DPU_VGDMAX_ID, {0x1C00D, 0x80, 0x76543210, 0x00000000, 0xAAAAAA98, 0x1000}},
	{M1_DPU_DSC_ID, {0x1C00D, 0x80, 0x76543210, 0x00000000, 0xAAAAAA98, 0x1000}},
	{M1_DPU_VEU_ID, {0x1C00D, 0x80, 0x76543210, 0x00000000, 0xAAAAAA98, 0x1000}},
	{M1_DPU_AXI_ID, {0x0, 0x8080, 0x10001000, 0x44443222, 0xC4443222, 0xE6666554}},
	{M1_VDEC_ID, {0x4040BD, 0x8080, 0x33333333, 0xB3333333, 0xB3333333, 0x10001000}},
	{M1_TCU_ID, {0x40423D, 0x8080, 0x66666666, 0xE6666666, 0xE6666666, 0x10001000}},
	{M2_ISP_FE_BE_ID, {0x4040BD, 0x8080, 0x43333222, 0xC3333222, 0xD5555544, 0x10001000}},
	{M2_ISP_CVE_PE_ID, {0x4040BD, 0x8080, 0x43333222, 0xC3333222, 0xC4444444, 0x10001000}},
	{M2_ISP_DMA_ID, {0x4040BD, 0x8080, 0x22222110, 0xA2222110, 0xA2222222, 0x10001000}},
	{M2_ISP_CDMA_ID, {0x4040BD, 0x8080, 0x55555555, 0xD5555555, 0xD5555555, 0x10001000}},
	{M2_ISP_MCU_ID, {0x4040BD, 0x8080, 0x66666666, 0xE6666666, 0xE6666666, 0x10001000}},
	{M2_ISP_TBU_ID, {0x404080, 0x8080, 0x66543210, 0xE6543210, 0xE6666666, 0x10001000}},
	{M2_VENC_ID, {0x4040BD, 0x8080, 0x22222222, 0xA2222222, 0xA2222222, 0x10001000}},
	{M2_TCU_ID, {0x40423D, 0x8080, 0x66666666, 0xE6666666, 0xE6666666, 0x10001000}},
	{NPU_XIODMA_ID, {0x40403D, 0xFFFF, 0x33333222, 0xB3333222, 0xB3333333, 0x10001000}},
	{NPU_VDSP_DMA256_ID, {0x40403D, 0xFFFF, 0x11111110, 0x91111110, 0x91111111, 0x10001000}},
	{NPU_DSA_GP_ID, {0x40403D, 0x8080, 0x22222210, 0xA2222210, 0xA2222222, 0x10001000}},
	{NPU_VDSP_128_ID, {0x40403D, 0x8080, 0x22222210, 0xA2222210, 0xA2222222, 0x10001000}},
	{NPU_M85_ID, {0x40403D, 0x4040, 0x66544444, 0xE6544444, 0xE6666666, 0x10001000}},
	{NPU_DMA_ID, {0x40403D, 0x4040, 0x22222210, 0xA2222210, 0xA2222222, 0x10001000}},
	{NPU_TCU_ID, {0x40403D, 0x4040, 0x66544444, 0xE6544444, 0xE6666666, 0x10001000}},
	{MAIN_NPU_ID, {0x40407D, 0x8080, 0x55543210, 0xD5543210, 0xD5555555, 0x10001000}},
	{MAIN_GPU_ID, {0x4040FD, 0xFFFF, 0x22222210, 0xA2222210, 0xA2222222, 0x10001000}},
	{MAIN_SYS1_ID, {0x40407D, 0x8080, 0x76543210, 0xF6543210, 0xF7777777, 0x10001000}},
};

enum sys_qos_mst {
	QOS_LPIS_SENSORHUB_M85_ID = 0,
	QOS_LPIS_SENSORHUB_DMA_ID,
	QOS_LPIS_DMA_ID,
	QOS_SPI_DMA_ID,
	QOS_HSS2_PCIE0_ID,
	QOS_HSS2_PCIE1_ID,
	QOS_HSS1_USB31_ID,
	QOS_PERI_DMA_S_ID,
	QOS_PERI_DMA_NS_ID,
	QOS_HSS1_UFS_ID,
	QOS_PERI_XRSE_M85_ID,
	QOS_PERI_XRSE_DMA_ID,
	QOS_PERI_XRSE_CE_ID,

	SYS_QOS_MAX
};

struct sys_qos_map {
	enum sys_qos_mst mst_id;
	unsigned int acpu_addr;
	unsigned int lpctrl_addr;
	unsigned int offset;
	unsigned int start_bit;
	unsigned int end_bit;
	unsigned int val;
};

#define SYS_QOS_REG_NUM 80

static struct sys_qos_map g_sys_qos_table[SYS_QOS_REG_NUM] = {

	{QOS_SPI_DMA_ID, 0xE1507000, 0xC1507000, 0x110, 11, 14, 0x6},

	{QOS_HSS2_PCIE0_ID, 0xCE000000, 0xAE000000, 0x3D0, 0, 0, 0x1},
	{QOS_HSS2_PCIE0_ID, 0xCE000000, 0xAE000000, 0x3D8, 0, 0, 0x1},
	{QOS_HSS2_PCIE0_ID, 0xCE000000, 0xAE000000, 0x3D4, 0, 3, 0x2},
	{QOS_HSS2_PCIE0_ID, 0xCE000000, 0xAE000000, 0x3DC, 0, 3, 0x2},
	{QOS_HSS2_PCIE1_ID, 0xCEC00000, 0xAEC00000, 0x3D0, 0, 0, 0x1},
	{QOS_HSS2_PCIE1_ID, 0xCEC00000, 0xAEC00000, 0x3D8, 0, 0, 0x1},
	{QOS_HSS2_PCIE1_ID, 0xCEC00000, 0xAEC00000, 0x3D4, 0, 3, 0x2},
	{QOS_HSS2_PCIE1_ID, 0xCEC00000, 0xAEC00000, 0x3DC, 0, 3, 0x2},

	{QOS_HSS1_USB31_ID, 0xE1890000, 0xC1890000, 0xE4, 0, 7, 0x22},

	{QOS_PERI_DMA_S_ID, 0xED018000, 0xCD018000, 0x158, 0, 7, 0x0},
	{QOS_PERI_DMA_S_ID, 0xED018000, 0xCD018000, 0x258, 0, 7, 0x0},
	{QOS_PERI_DMA_S_ID, 0xED018000, 0xCD018000, 0x358, 0, 7, 0x0},
	{QOS_PERI_DMA_S_ID, 0xED018000, 0xCD018000, 0x458, 0, 7, 0x0},
	{QOS_PERI_DMA_S_ID, 0xED018000, 0xCD018000, 0x558, 0, 7, 0x0},
	{QOS_PERI_DMA_S_ID, 0xED018000, 0xCD018000, 0x658, 0, 7, 0x0},
	{QOS_PERI_DMA_S_ID, 0xED018000, 0xCD018000, 0x758, 0, 7, 0x0},
	{QOS_PERI_DMA_S_ID, 0xED018000, 0xCD018000, 0x858, 0, 7, 0x0},
	{QOS_PERI_DMA_S_ID, 0xED018000, 0xCD018000, 0x958, 0, 7, 0x0},
	{QOS_PERI_DMA_S_ID, 0xED018000, 0xCD018000, 0xA58, 0, 7, 0x0},
	{QOS_PERI_DMA_S_ID, 0xED018000, 0xCD018000, 0xB58, 0, 7, 0x0},
	{QOS_PERI_DMA_S_ID, 0xED018000, 0xCD018000, 0xC58, 0, 7, 0x0},
	{QOS_PERI_DMA_S_ID, 0xED018000, 0xCD018000, 0xD58, 0, 7, 0x0},
	{QOS_PERI_DMA_S_ID, 0xED018000, 0xCD018000, 0xE58, 0, 7, 0x0},
	{QOS_PERI_DMA_S_ID, 0xED018000, 0xCD018000, 0xF58, 0, 7, 0x0},
	{QOS_PERI_DMA_S_ID, 0xED018000, 0xCD018000, 0x1058, 0, 7, 0x0},
	{QOS_PERI_DMA_S_ID, 0xED018000, 0xCD018000, 0x1158, 0, 7, 0x0},
	{QOS_PERI_DMA_S_ID, 0xED018000, 0xCD018000, 0x1258, 0, 7, 0x0},
	{QOS_PERI_DMA_S_ID, 0xED018000, 0xCD018000, 0x1358, 0, 7, 0x0},
	{QOS_PERI_DMA_S_ID, 0xED018000, 0xCD018000, 0x1458, 0, 7, 0x0},
	{QOS_PERI_DMA_S_ID, 0xED018000, 0xCD018000, 0x1558, 0, 7, 0x0},
	{QOS_PERI_DMA_S_ID, 0xED018000, 0xCD018000, 0x1658, 0, 7, 0x0},
	{QOS_PERI_DMA_S_ID, 0xED018000, 0xCD018000, 0x1758, 0, 7, 0x0},
	{QOS_PERI_DMA_S_ID, 0xED018000, 0xCD018000, 0x1858, 0, 7, 0x0},
	{QOS_PERI_DMA_S_ID, 0xED018000, 0xCD018000, 0x1958, 0, 7, 0x0},
	{QOS_PERI_DMA_S_ID, 0xED018000, 0xCD018000, 0x1A58, 0, 7, 0x0},

	{QOS_PERI_DMA_NS_ID, 0xED014000, 0xCD014000, 0x158, 0, 7, 0x0},
	{QOS_PERI_DMA_NS_ID, 0xED014000, 0xCD014000, 0x258, 0, 7, 0x0},
	{QOS_PERI_DMA_NS_ID, 0xED014000, 0xCD014000, 0x358, 0, 7, 0x0},
	{QOS_PERI_DMA_NS_ID, 0xED014000, 0xCD014000, 0x458, 0, 7, 0x0},
	{QOS_PERI_DMA_NS_ID, 0xED014000, 0xCD014000, 0x558, 0, 7, 0x0},
	{QOS_PERI_DMA_NS_ID, 0xED014000, 0xCD014000, 0x658, 0, 7, 0x0},
	{QOS_PERI_DMA_NS_ID, 0xED014000, 0xCD014000, 0x758, 0, 7, 0x0},
	{QOS_PERI_DMA_NS_ID, 0xED014000, 0xCD014000, 0x858, 0, 7, 0x0},
	{QOS_PERI_DMA_NS_ID, 0xED014000, 0xCD014000, 0x958, 0, 7, 0x0},
	{QOS_PERI_DMA_NS_ID, 0xED014000, 0xCD014000, 0xA58, 0, 7, 0x0},
	{QOS_PERI_DMA_NS_ID, 0xED014000, 0xCD014000, 0xB58, 0, 7, 0x0},
	{QOS_PERI_DMA_NS_ID, 0xED014000, 0xCD014000, 0xC58, 0, 7, 0x0},
	{QOS_PERI_DMA_NS_ID, 0xED014000, 0xCD014000, 0xD58, 0, 7, 0x0},
	{QOS_PERI_DMA_NS_ID, 0xED014000, 0xCD014000, 0xE58, 0, 7, 0x0},
	{QOS_PERI_DMA_NS_ID, 0xED014000, 0xCD014000, 0xF58, 0, 7, 0x0},
	{QOS_PERI_DMA_NS_ID, 0xED014000, 0xCD014000, 0x1058, 0, 7, 0x0},
	{QOS_PERI_DMA_NS_ID, 0xED014000, 0xCD014000, 0x1158, 0, 7, 0x0},
	{QOS_PERI_DMA_NS_ID, 0xED014000, 0xCD014000, 0x1258, 0, 7, 0x0},
	{QOS_PERI_DMA_NS_ID, 0xED014000, 0xCD014000, 0x1358, 0, 7, 0x0},
	{QOS_PERI_DMA_NS_ID, 0xED014000, 0xCD014000, 0x1458, 0, 7, 0x0},
	{QOS_PERI_DMA_NS_ID, 0xED014000, 0xCD014000, 0x1558, 0, 7, 0x0},
	{QOS_PERI_DMA_NS_ID, 0xED014000, 0xCD014000, 0x1658, 0, 7, 0x0},
	{QOS_PERI_DMA_NS_ID, 0xED014000, 0xCD014000, 0x1758, 0, 7, 0x0},
	{QOS_PERI_DMA_NS_ID, 0xED014000, 0xCD014000, 0x1858, 0, 7, 0x0},
	{QOS_PERI_DMA_NS_ID, 0xED014000, 0xCD014000, 0x1958, 0, 7, 0x0},
	{QOS_PERI_DMA_NS_ID, 0xED014000, 0xCD014000, 0x1A58, 0, 7, 0x0},
	{QOS_PERI_DMA_NS_ID, 0xED014000, 0xCD014000, 0x1B58, 0, 7, 0x0},
	{QOS_PERI_DMA_NS_ID, 0xED014000, 0xCD014000, 0x1C58, 0, 7, 0x0},
	{QOS_PERI_DMA_NS_ID, 0xED014000, 0xCD014000, 0x1D58, 0, 7, 0x0},
	{QOS_PERI_DMA_NS_ID, 0xED014000, 0xCD014000, 0x1E58, 0, 7, 0x0},

	{QOS_HSS1_UFS_ID, 0xE1A50000, 0xC1A50000, 0x5C, 0, 7, 0x55},

	{QOS_PERI_XRSE_M85_ID, 0xEE400000, 0xCE400000, 0xC, 0, 7, 0x0},

	{QOS_PERI_XRSE_DMA_ID, 0xEE502000, 0xCE502000, 0x158, 0, 7, 0x0},
	{QOS_PERI_XRSE_DMA_ID, 0xEE502000, 0xCE502000, 0x258, 0, 7, 0x0},
	{QOS_PERI_XRSE_DMA_ID, 0xEE502000, 0xCE502000, 0x358, 0, 7, 0x0},
	{QOS_PERI_XRSE_DMA_ID, 0xEE502000, 0xCE502000, 0x458, 0, 7, 0x0},
	{QOS_PERI_XRSE_DMA_ID, 0xEE502000, 0xCE502000, 0x558, 0, 7, 0x0},
	{QOS_PERI_XRSE_DMA_ID, 0xEE502000, 0xCE502000, 0x658, 0, 7, 0x0},

	{QOS_PERI_XRSE_CE_ID, 0xEE50D000, 0xCE50D000, 0x320, 0, 7, 0x0},
};

#define QOSREMAP_CFG_NUM 3
struct isp_qosremap_cfg_map {
	enum tpc_mst_id id;
	unsigned int val[QOSREMAP_CFG_NUM];
};

#define ISP_QOSREMAP_TABLE_NUM 6
static struct isp_qosremap_cfg_map g_isp_qosremap_table[ISP_QOSREMAP_TABLE_NUM] = {
	{M2_ISP_FE_BE_ID, {0x43333222, 0xC3333222, 0xD5555544}},
	{M2_ISP_CVE_PE_ID, {0x43333222, 0xC3333222, 0xC4444444}},
	{M2_ISP_DMA_ID, {0x22222110, 0xA2222110, 0xA2222222}},
	{M2_ISP_CDMA_ID, {0x55555555, 0xD5555555, 0xD5555555}},
	{M2_ISP_MCU_ID, {0x66666666, 0xE6666666, 0xE6666666}},
	{M2_ISP_TBU_ID, {0x66543210, 0xE6543210, 0xE6666666}},
};

static inline void* xring_flowctrl_get_cfg_table(enum flowctrl_mst_id mst_id)
{
	switch (mst_id) {
		case MST_NPU_QOS_ID:
			return g_npu_qos_table;
		case MST_ISP_QOS_ID:
			return g_isp_qos_table;
		case MST_ISP_QOS_THR_ID:
			return g_isp_qos_thr_table;
		case MST_DPU_QOS_ID:
			return g_dpu_qos_table;
		case MST_VPU_QOS_ID:
			return g_vpu_qos_table;
		case MST_TPC_COMMON_TABLE_ID:
			return g_tpc_common_cfg_table;
		case MST_TPC_TABLE_ID:
			return g_tpc_cfg_table;
		case SYS_QOS_TABLE_ID:
			return g_sys_qos_table;
		case ISP_QOS_REMAP_TABLE_ID:
			return g_isp_qosremap_table;
		case MST_MAX:
		default:
			break;
	}

	return NULL;
}
#endif
