/****************************************************************************
 *   Copyright (C) 2023 Xiaomi Inc. All rights reserved.
 *   Author: xupeng <xupeng9@xiaomi.com>
 ****************************************************************************/
#ifndef __INCLUDE_SYS_PM_COMM_H__
#define __INCLUDE_SYS_PM_COMM_H__
#if defined(__KERNEL__) && !defined(__NuttX__)
#include <dt-bindings/xring/platform-specific/pm/include/sys_pm_comm_plat.h>
#else
#include "pm/include/sys_pm_comm_plat.h"
#endif

/* tickmark reg type */
#define TICKMARK_SYSCTRL 1
#define TICKMARK_PMUREG 2
#define TICKMARK_H_BITS 0xFFF0000
#define SCTRL_TICK(tick) (tick | TICKMARK_H_BITS)
#define PMU_TICK(tick) ((tick) & 0xFF)
#define SYS_STATE_REG_MASK 0xF
#define SYS_STATE_REG_BITMASK 0xF0000

/* The PMU tickmark still exists after the reset
 * However, writing PMU registers is time-consuming,
 * so try to record the most critical information as much as possible
 */
enum sys_pm_pmu_tick {
	PMU_TICK_XCTRLCUP_SUSPEND_FINISH = 1,
	PMU_TICK_LPCTRL_SUSPEND_FINISH,

	PMU_TICK_LPCTRL_RESUME_FINISH,
	PMU_TICK_XCTRLCUP_RESUME_FINISH,
	PMU_TICK_MAX
};

/**
 * for record SR steps
 *
 * the high 8 bits represent the modules
 *   bit0: lpctrl
 *   bit1: xctrl_cpu
 *   bit2: atf
 *   bit3: acpu
 * the low 8 bits indicate specific steps
**/
enum sys_pm_sctrl_tick {
	/* important or special steps */
	SYS_TICK_SYSCTRL_INTR_TIMEOUT_ERR =  1,
	SYS_TICK_SYSCTRL_EXIT_ULPS_ERR,
	SYS_TICK_SYSCTRL_EXIT_LPS_ERR,
	SYS_TICK_XCTRLCPU_APO_ERR, //xctrl cpu already power on
	SYS_TICK_XCTRLCPU_RESUME_ERR,

	/* lpctrl SR steps */
	SYS_TICK_LPCTRL_SUSPEND_BEGIN = 0x100,
	SYS_TICK_LPCTRL_CPU_SUSPEND = SYS_TICK_LPCTRL_SUSPEND_BEGIN,
	SYS_TICK_LPCTRL_XCTRL_CPU_SUSPEND,
	SYS_TICK_LPCTRL_XRSE_SUSPEND,
	SYS_TICK_LPCTRL_XCTRLDDR_SUSPEND,
	SYS_TICK_LPCTRL_DDR_SUSPEND,
	SYS_TICK_LPCTRL_DVS_SUSPEND,
	SYS_TICK_LPCTRL_XCTRCPU_POWER_OFF_DEV,
	SYS_TICK_LPCTRL_CPU_SUBCHIP_POWER_OFF_DEV,
	SYS_TICK_LPCTRL_PERIFIX_SUSPEND,
	SYS_TICK_LPCTRL_PERI_BACKUP,
	SYS_TICK_LPCTRL_SUSPEND_CLOSE_IRQS,
	SYS_TICK_LPCTRL_BUS_DISCON,
	SYS_TICK_LPCTRL_NOR2SUS_ALARM,
	SYS_TICK_LPCTRL_NOR2SUS_DONE,
	SYS_TICK_LPCTRL_SUSPEND_FINISH = 0x170,
	SYS_TICK_LPCTRL_SUS_ULP_BEGAIN,
	SYS_TICK_LPCTRL_SUS_ULP_CLOSE_IRQS,
	SYS_TICK_LPCTRL_SUS_ULP_ALARM,
	SYS_TICK_LPCTRL_SUS_ULP_FINISH = 0x17F,
	SYS_TICK_LPCTRL_RESUME_BEGIN = 0x180,
	SYS_TICK_LPCTRL_ULP2LPS_DONE_IRQ = SYS_TICK_LPCTRL_RESUME_BEGIN,
	SYS_TICK_LPCTRL_ULP_WAKUP_INFO_RECORD,
	SYS_TICK_LPCTRL_LPS_WAKEALARM,
	SYS_TICK_LPCTRL_LPS_FAST_WAKEUP,
	SYS_TICK_LPCTRL_ULP_OPEN_IRQS,
	SYS_TICK_LPCTRL_LPS2HPS_DONE_IRQ,
	SYS_TICK_LPCTRL_SUSPEND_WAKUP_INFO_RECORD,
	SYS_TICK_LPCTRL_SUSPEND_OPEN_IRQS,
	SYS_TICK_LPCTRL_HPS_WAKEALARM,
	SYS_TICK_LPCTRL_HPS_FAST_WAKEUP,
	SYS_TICK_LPCTRL_BUS_CON,
	SYS_TICK_LPCTRL_PERI_RECOVER,
	SYS_TICK_LPCTRL_PERIFIX_RESUME,
	SYS_TICK_LPCTRL_CPU_SUBCHIP_POWER_ON_DEV,
	SYS_TICK_LPCTRL_XCTRLCPU_POWER_ON_DEV,
	SYS_TICK_LPCTRL_DVS_RESUME,
	SYS_TICK_LPCTRL_DDR_RESUME,
	SYS_TICK_LPCTRL_XCTRLDDR_RESUME,
	SYS_TICK_LPCTRL_XRSE_RESUME,
	SYS_TICK_LPCTRL_XCTRL_CPU_RESUME = 0x1FF,
	SYS_TICK_LPCTRL_RESUME_FINISH = SYS_TICK_LPCTRL_XCTRL_CPU_RESUME,

	SYS_TICK_XCTRLCPU_DSU_SUSPEND_BEGIN = 0x200,
	SYS_TICK_XCTRLCPU_DSU_POWER_OFF,
	SYS_TICK_XCTRLCPU_DSU_WAIT_PSCM,
	SYS_TICK_XCTRLCPU_DSU_SUSPEND_FINISH,
	SYS_TICK_XCTRLCPU_SUSPEND_BEGIN,
	SYS_TICK_XCTRLCPU_SUSPEND_FINISH = 0x27F,
	SYS_TICK_XCTRLCPU_RESUME_BEGIN = 0x280,
	SYS_TICK_XCTRLCPU_RST_CPU,
	SYS_TICK_XCTRLCPU_GPC_EN,
	SYS_TICK_XCTRLCPU_RESUME_FINISH,
	SYS_TICK_XCTRLCPU_DSU_RESUME_BEGIN,
	SYS_TICK_XCTRLCPU_DSU_PLL_INIT,
	SYS_TICK_XCTRLCPU_DSU_ENABLE_DBG_BLOCK,
	SYS_TICK_XCTRLCPU_DSU_INIT_PPU,
	SYS_TICK_XCTRLCPU_DSU_POWER_ON,
	SYS_TICK_XCTRLCPU_DSU_RESUME_FINISH = 0x2FF,

	SYS_TICK_ATF_SUSPEND_BEGIN = 0x400,
	SYS_TICK_ATF_CLUSTER_PWRDN,
	SYS_TICK_ATF_GIC_SAVE,
	SYS_TICK_ATF_SYS_PWRDN,
	SYS_TICK_ATF_SUSPEND_FINISH = 0x47F,
	SYS_TICK_ATF_RESUME_BEGIN = 0x480,
	SYS_TICK_ATF_CONSOLE_INIT,
	SYS_TICK_ATF_GIC_RESTORE,
	SYS_TICK_ATF_GIC_ENABLE,
	SYS_TICK_ATF_CLR_PWRDN_INTR,
	SYS_TICK_ATF_DIS_KEEP_DSU_CLUSTER_ON,
	SYS_TICK_ATF_RESUME_FINISH = 0x4FF,

	SYS_TICK_ACPU_SUSPEND_BEGIN = 0x800,
	SYS_TICK_ACPU_SUSPEND,
	SYS_TICK_ACPU_SUSPEND_LATE,
	SYS_TICK_ACPU_SUSPEND_NOIRQ,
	SYS_TICK_ACPU_SUSPEND_FINISH = 0x87F,
	SYS_TICK_ACPU_RESUME_BEGIN = 0x880,
	SYS_TICK_ACPU_RESUME_NOIRQ,
	SYS_TICK_ACPU_RESUME_EARLY,
	SYS_TICK_ACPU_RESUME,
	SYS_TICK_ACPU_RESUME_FINISH = 0x8FF,
};

enum sys_pm_device_type {
	DEVICE_CPU,
	DEVICE_NPU,
	DEVICE_MAX
};

void sys_pm_sctrl_tickmark(enum sys_pm_sctrl_tick tick);
void sys_pm_pmu_tickmark(enum sys_pm_pmu_tick tick);
uint64_t cpu_mpidr(uint32_t cpu);

#endif /* __INCLUDE_SYS_PM_COMM_H__ */
