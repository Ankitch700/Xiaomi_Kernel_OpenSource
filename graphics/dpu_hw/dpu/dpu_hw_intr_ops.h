/* SPDX-License-Identifier: GPL-2.0 */
/*
 * Copyright (c) 2023-2023 XRing Technologies Co., Ltd.
 *
 * This software is licensed under the terms of the GNU General Public
 * License version 2, as published by the Free Software Foundation, and
 * may be copied, distributed, and modified under those terms.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 */

#ifndef _DPU_HW_INTR_OPS_H_
#define _DPU_HW_INTR_OPS_H_

#include "dpu_hw_common.h"
#include "dpu_hw_intr_reg.h"

/* total non-secure dpu intr reg num */
#define DPU_INTR_REG_NUM           (OFFL0_ARB_DEC_PADDR_OFFSET / 4 + 1)

/* all interrupt types definition of DPU */
enum dpu_intr_type {
	DPU_INTR_ONLINE0 = 0,
	DPU_INTR_ONLINE1,
	DPU_INTR_OFFLINE0,
	DPU_INTR_TYPE_MAX
};

#define DPU_IRQ_NAME_LEN            256
/**
 * dpu_intr_map - dpu interrupt mapping table
 * @id: dpu interrupt index.
 * @reg_offset: interrupt register address offset.
 * @bit_shift: interrupt bit shift.
 */
struct dpu_intr_map {
	u32 id;
	u32 reg_offset;
	u32 bit_shift;
	char irq_name[DPU_IRQ_NAME_LEN];
};

enum dpu_intr_id {
	INTR_ONLINE0_FRM_TIMING_VSYNC = 0,
	INTR_ONLINE0_FRM_TIMING_EOF,
	INTR_ONLINE0_FRM_TIMING_EOF_START,
	INTR_ONLINE0_FRM_TIMING_EOF_END,
	INTR_ONLINE0_FRM_TIMING_LINE,
	INTR_ONLINE0_CFG_RDY,
	INTR_ONLINE0_WB0_DONE,
	INTR_ONLINE0_WB1_DONE,
	INTR_ONLINE0_FRM_TIMING_UNDERFLOW,
	INTR_ONLINE0_WB0_OVERFLOW,
	INTR_ONLINE0_WB1_OVERFLOW,
	INTR_ONLINE0_CMDLIST_RCH0_CFG_DONE,
	INTR_ONLINE0_CMDLIST_RCH1_CFG_DONE,
	INTR_ONLINE0_CMDLIST_RCH2_CFG_DONE,
	INTR_ONLINE0_CMDLIST_RCH3_CFG_DONE,
	INTR_ONLINE0_CMDLIST_RCH4_CFG_DONE,
	INTR_ONLINE0_CMDLIST_RCH5_CFG_DONE,
	INTR_ONLINE0_CMDLIST_RCH6_CFG_DONE,
	INTR_ONLINE0_CMDLIST_RCH7_CFG_DONE,
	INTR_ONLINE0_CMDLIST_RCH8_CFG_DONE,
	INTR_ONLINE0_CMDLIST_RCH9_CFG_DONE,
	INTR_ONLINE0_CMDLIST_COMPOSER0_CFG_DONE,
	INTR_ONLINE0_CMDLIST_COMPOSER1_CFG_DONE,
	INTR_ONLINE0_CMDLIST_COMPOSER2_CFG_DONE,
	INTR_ONLINE0_ACAD_FRM_DONE,
	INTR_ONLINE0_DSC_WDMA0_FRM_DONE,
	INTR_ONLINE0_DSC_WDMA1_FRM_DONE,
	INTR_ONLINE0_DSC_WDMA0_OVERFLOW,
	INTR_ONLINE0_DSC_WDMA1_OVERFLOW,
	INTR_ONLINE0_CMDLIST_RCH0_ENTER_PENDING,
	INTR_ONLINE0_CMDLIST_RCH1_ENTER_PENDING,
	INTR_ONLINE0_CMDLIST_RCH2_ENTER_PENDING,
	INTR_ONLINE0_CMDLIST_RCH3_ENTER_PENDING,
	INTR_ONLINE0_CMDLIST_RCH4_ENTER_PENDING,
	INTR_ONLINE0_CMDLIST_RCH5_ENTER_PENDING,
	INTR_ONLINE0_CMDLIST_RCH6_ENTER_PENDING,
	INTR_ONLINE0_CMDLIST_RCH7_ENTER_PENDING,
	INTR_ONLINE0_CMDLIST_RCH8_ENTER_PENDING,
	INTR_ONLINE0_CMDLIST_RCH9_ENTER_PENDING,
	INTR_ONLINE0_CMDLIST_COMPOSER0_ENTER_PENDING,
	INTR_ONLINE0_CMDLIST_COMPOSER1_ENTER_PENDING,
	INTR_ONLINE0_CMDLIST_COMPOSER2_ENTER_PENDING,
	INTR_ONLINE0_PSLVERR,
	INTR_ONLINE0_TMG_VIDEO_TE,
	INTR_ONLINE0_TMG_ACTIVE_POWER_DOWN,
	INTR_ONLINE0_TMG_ULPS_EXIT,
	INTR_ONLINE0_TMG_ULPS_ENTRY,
	INTR_ONLINE0_TMG_OTHER_PART_POWER_ON,
	INTR_ONLINE0_TMG_HOF,
	INTR_ONLINE0_TMG_VACTIVE_START,
	INTR_ONLINE0_DDR_DVFS_REQUEST,
	INTR_ONLINE0_DVFS_FAIL,
	INTR_ONLINE0_DMA_DBG_PART1_RDMA,
	INTR_ONLINE0_DMA_DBG_PART2_RDMA,
	INTR_ONLINE0_DMA_DBG_WDMA,
	INTR_ONLINE0_CMDLIST_DBG,
	INTR_ONLINE0_MAX,

	INTR_COMBO_FRM_TIMING_VSYNC,
	INTR_COMBO_FRM_TIMING_EOF,
	INTR_COMBO_FRM_TIMING_EOF_START,
	INTR_COMBO_FRM_TIMING_EOF_END,
	INTR_COMBO_FRM_TIMING_LINE,
	INTR_COMBO_CFG_RDY,
	INTR_COMBO_WB0_DONE,
	INTR_COMBO_WB1_DONE,
	INTR_COMBO_FRM_TIMING_UNDERFLOW,
	INTR_COMBO_WB0_OVERFLOW,
	INTR_COMBO_WB1_OVERFLOW,
	INTR_COMBO_CMDLIST_RCH0_CFG_DONE,
	INTR_COMBO_CMDLIST_RCH1_CFG_DONE,
	INTR_COMBO_CMDLIST_RCH2_CFG_DONE,
	INTR_COMBO_CMDLIST_RCH3_CFG_DONE,
	INTR_COMBO_CMDLIST_RCH4_CFG_DONE,
	INTR_COMBO_CMDLIST_RCH5_CFG_DONE,
	INTR_COMBO_CMDLIST_RCH6_CFG_DONE,
	INTR_COMBO_CMDLIST_RCH7_CFG_DONE,
	INTR_COMBO_CMDLIST_RCH8_CFG_DONE,
	INTR_COMBO_CMDLIST_RCH9_CFG_DONE,
	INTR_COMBO_CMDLIST_COMPOSER0_CFG_DONE,
	INTR_COMBO_CMDLIST_COMPOSER1_CFG_DONE,
	INTR_COMBO_CMDLIST_COMPOSER2_CFG_DONE,
	INTR_COMBO_WB0_SLICE_DONE,
	INTR_COMBO_WB1_SLICE_DONE,
	INTR_COMBO_CMDLIST_RCH0_ENTER_PENDING,
	INTR_COMBO_CMDLIST_RCH1_ENTER_PENDING,
	INTR_COMBO_CMDLIST_RCH2_ENTER_PENDING,
	INTR_COMBO_CMDLIST_RCH3_ENTER_PENDING,
	INTR_COMBO_CMDLIST_RCH4_ENTER_PENDING,
	INTR_COMBO_CMDLIST_RCH5_ENTER_PENDING,
	INTR_COMBO_CMDLIST_RCH6_ENTER_PENDING,
	INTR_COMBO_CMDLIST_RCH7_ENTER_PENDING,
	INTR_COMBO_CMDLIST_RCH8_ENTER_PENDING,
	INTR_COMBO_CMDLIST_RCH9_ENTER_PENDING,
	INTR_COMBO_CMDLIST_COMPOSER0_ENTER_PENDING,
	INTR_COMBO_CMDLIST_COMPOSER1_ENTER_PENDING,
	INTR_COMBO_CMDLIST_COMPOSER2_ENTER_PENDING,
	INTR_COMBO_PSLVERR,
	INTR_COMBO_TMG_VIDEO_TE,
	INTR_COMBO_TMG_ACTIVE_POWER_DOWN,
	INTR_COMBO_TMG_ULPS_EXIT,
	INTR_COMBO_TMG_ULPS_ENTRY,
	INTR_COMBO_TMG_OTHER_PART_POWER_ON,
	INTR_COMBO_TMG_HOF,
	INTR_COMBO_TMG_VACTIVE_START,
	INTR_COMBO_DMA_DBG_PART1_RDMA,
	INTR_COMBO_DMA_DBG_PART2_RDMA,
	INTR_COMBO_DMA_DBG_WDMA,
	INTR_COMBO_CMDLIST_DBG,
	INTR_COMBO_MAX,

	INTR_OFFLINE0_CFG_RDY,
	INTR_OFFLINE0_WB0_DONE,
	INTR_OFFLINE0_WB1_DONE,
	INTR_OFFLINE0_WB0_SLICE_DONE,
	INTR_OFFLINE0_WB1_SLICE_DONE,
	INTR_OFFLINE0_CMDLIST_RCH0_CFG_DONE,
	INTR_OFFLINE0_CMDLIST_RCH1_CFG_DONE,
	INTR_OFFLINE0_CMDLIST_RCH2_CFG_DONE,
	INTR_OFFLINE0_CMDLIST_RCH3_CFG_DONE,
	INTR_OFFLINE0_CMDLIST_RCH4_CFG_DONE,
	INTR_OFFLINE0_CMDLIST_RCH5_CFG_DONE,
	INTR_OFFLINE0_CMDLIST_RCH6_CFG_DONE,
	INTR_OFFLINE0_CMDLIST_RCH7_CFG_DONE,
	INTR_OFFLINE0_CMDLIST_RCH8_CFG_DONE,
	INTR_OFFLINE0_CMDLIST_RCH9_CFG_DONE,
	INTR_OFFLINE0_CMDLIST_COMPOSER0_CFG_DONE,
	INTR_OFFLINE0_CMDLIST_COMPOSER1_CFG_DONE,
	INTR_OFFLINE0_CMDLIST_COMPOSER2_CFG_DONE,
	INTR_OFFLINE0_CMDLIST_RCH0_ENTER_PENDING,
	INTR_OFFLINE0_CMDLIST_RCH1_ENTER_PENDING,
	INTR_OFFLINE0_CMDLIST_RCH2_ENTER_PENDING,
	INTR_OFFLINE0_CMDLIST_RCH3_ENTER_PENDING,
	INTR_OFFLINE0_CMDLIST_RCH4_ENTER_PENDING,
	INTR_OFFLINE0_CMDLIST_RCH5_ENTER_PENDING,
	INTR_OFFLINE0_CMDLIST_RCH6_ENTER_PENDING,
	INTR_OFFLINE0_CMDLIST_RCH7_ENTER_PENDING,
	INTR_OFFLINE0_CMDLIST_RCH8_ENTER_PENDING,
	INTR_OFFLINE0_CMDLIST_RCH9_ENTER_PENDING,
	INTR_OFFLINE0_CMDLIST_COMPOSER0_ENTER_PENDING,
	INTR_OFFLINE0_CMDLIST_COMPOSER1_ENTER_PENDING,
	INTR_OFFLINE0_CMDLIST_COMPOSER2_ENTER_PENDING,
	INTR_OFFLINE0_PSLVERR,
	INTR_OFFLINE0_DMA_DBG_PART1_RDMA,
	INTR_OFFLINE0_DMA_DBG_PART2_RDMA,
	INTR_OFFLINE0_DMA_DBG_WDMA,
	INTR_OFFLINE0_CMDLIST_DBG,
	INTR_OFFLINE0_MAX,

	INTR_TOTAL_HW_IRQ_NUM = INTR_OFFLINE0_MAX,
	INTR_SIMULATE_IDLE_ENTER,
};

/**
 * dpu_hw_intr_enable - enable interrupt.
 * @hw: module_addr
 * @intr_id: used to index interrupt from intr_map.
 * @enable: interrupt enabled status.
 */
void dpu_hw_intr_enable(struct dpu_hw_blk *hw,
		enum dpu_intr_id intr_id, bool enable);

/**
 * dpu_hw_intr_status_get - get interrupt status.
 * @hw: module_addr
 * @intr_id: used to index interrupt from intr_map.
 *
 * Return: true on triggered case, false on non-triggered case.
 */
bool dpu_hw_intr_status_get(struct dpu_hw_blk *hw,
		enum dpu_intr_id intr_id);

/**
 * dpu_hw_intr_status_clear - clear interrupt status.
 * @hw: module_addr
 * @intr_id: used to index interrupt from intr_map.
 */
void dpu_hw_intr_status_clear(struct dpu_hw_blk *hw,
		enum dpu_intr_id intr_id);

/**
 * dpu_hw_intr_irq_status_dump - dump irq status
 *
 * @hw: module_addr
 */
void dpu_hw_intr_irq_status_dump(struct dpu_hw_blk *hw);

/**
 * dpu_hw_intr_irq_status_dump - dump irq status
 *
 * @hw: module_addr
 * @intr_type
 *
 * Returnï¼špslverr reg value
 */
u32 dpu_hw_intr_pslverr_dump(struct dpu_hw_blk *hw, u32 intr_type);

/**
 * dpu_hw_intr_irq_status_get_all - get all the intr of the intr_type to intr_reg_val
 * @hw: module_addr
 * @intr_type: the intr type
 * @intr_reg_val: the u32 array used to store intr status valuesss
 * @intr_reg_num: the num of intr_reg_val array
 */
void dpu_hw_intr_irq_status_get_all(struct dpu_hw_blk *hw, u32 intr_type,
		u32 *intr_reg_val, u32 intr_reg_num);

/*
 * dpu_hw_intr_irq_status_get_from_cache - check the intr_id is triggered or not
 * @hw: module_addr
 * @intr_id: used to index interrupt from intr_map.
 * @intr_reg_val: store all the intr status of the intr pipe
 * @intr_reg_num: the num of intr_reg_val array
 */
bool dpu_hw_intr_irq_status_get_from_cache(struct dpu_hw_blk *hw, u32 intr_id,
		u32 *intr_reg_val, u32 intr_reg_num);

extern struct dpu_intr_map intr_map[];

#endif
